Explanation
Use a stack to perform iterative preorder traversal.
Push the root node onto the stack to start.
In each iteration, pop a node, record its value, then push right child first, then left child to maintain preorder order.
Repeat until the stack is empty.

Complexity
Time: O(n) → each node is visited once.
Space: O(h) → stack space, where h is the height of the tree.

Code
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if(root == nullptr)
            return {};

        vector<int> ans;
        stack<TreeNode*> st;
        st.push(root);

        while(!st.empty())
        {
            TreeNode* node = st.top();
            st.pop();
            ans.push_back(node->val);

            if(node->right)
                st.push(node->right);
            if(node->left)
                st.push(node->left);
        }
        return ans;
    }       
};