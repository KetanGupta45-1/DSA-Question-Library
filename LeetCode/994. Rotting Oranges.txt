Explanation
Count initial fresh oranges and push all rotten oranges into a queue as BFS starting points.
Perform multi-source BFS level by level, where each level = 1 minute.
For each rotten orange, rot its 4-directional fresh neighbors and push them into the queue.
Keep track of time and reduce the fresh orange count as they rot.
If all fresh oranges rot, return total time; otherwise return -1.

Time Complexity
O(n × m) → Each cell is processed at most once.

Space Complexity
O(n × m) → Queue can store all cells in the worst case.

Code
typedef pair<int, int> p;
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<p> q;
        int n = grid.size();
        int m = grid[0].size();
        int freshoranges = 0;
        int time = 0;

        vector<p> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 2)
                    q.push({i, j});
                else if(grid[i][j] == 1)
                    freshoranges++;
            }
        }

        if(freshoranges == 0)
            return 0;

        while(!q.empty())
        {
            int size = q.size();
            bool rotted_this_minute = false;

            while(size--)
            {
                auto [x, y] = q.front();
                q.pop();

                for(auto [dx, dy] : directions)
                {
                    int nx = x + dx;
                    int ny = y + dy;

                    if(nx >= 0 && ny >= 0 && nx < n && ny < m && grid[nx][ny] == 1)
                    {
                        grid[nx][ny] = 2;
                        q.push({nx, ny});
                        freshoranges--;
                        rotted_this_minute = true;
                    }
                }
            }

            if(rotted_this_minute)
                time++;
        }

        return freshoranges == 0 ? time : -1;
    }
};