Explanation
Traverse the array from right to left.
Use a stack to keep track of the maximum element seen so far.
For each element, the top of the stack is the next greatest element to its right (or -1 if none).
Update the stack with the current element if it is greater than the top.

Time Complexity: O(n)
Space Complexity: O(n)

Code
class Solution {
public:
    vector<int> replaceElements(vector<int>& arr) {
        stack<int> st;
        st.push(-1);
        int n = arr.size();
        vector<int> ans(n);

        for(int i = n - 1; i >= 0; i--) {   
            ans[i] = st.top();
            if(arr[i] > st.top())
                st.push(arr[i]);
        }

        return ans;
    }
};
