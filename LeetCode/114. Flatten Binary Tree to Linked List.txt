Explanation
Traverse the tree in reverse preorder (right → left → root).
Keep track of the previously visited node (prev).
For each node:
Set its right pointer to prev.
Set its left pointer to nullptr.
Update prev = root.
This ensures nodes are linked in the required order (root → left → right).

⏱️ Complexity
Time: O(n) — each node visited once.
Space: O(h) recursion stack (h = height of tree).

class Solution {
public:
    TreeNode* prev = nullptr;
    void flatten(TreeNode* root) {
        if(!root)
            return;

        flatten(root->right);
        flatten(root->left);

        root->left = nullptr;
        root->right = prev;
        prev = root;
    }
};