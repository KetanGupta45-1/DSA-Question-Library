Explanation
Precompute maximum values to the left and right of each element using two arrays.
For each element nums[i], compute (max_left[i] - nums[i]) * max_right[i].
Keep track of the maximum value found across all positions.
Return the maximum triplet value after checking all elements.

Complexity
Time: O(n) → three linear passes over the array.
Space: O(n) → for leftmax and rightmax arrays.

Code
class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n = nums.size();
        vector<int> leftmax(n, 0), rightmax(n, 0);
        long long temp, maxans = 0;

        leftmax[0] = 0;
        for (int i = 1; i < n; i++)
            leftmax[i] = max(leftmax[i - 1], nums[i - 1]);

        rightmax[n - 1] = 0;
        for (int i = n - 2; i >= 0; i--)
            rightmax[i] = max(rightmax[i + 1], nums[i + 1]);

        for (int i = 0; i < n; i++) {
            temp = (long long)(leftmax[i] - nums[i]) * rightmax[i];
            maxans = max(maxans, temp);
        }

        return maxans;
    }
};