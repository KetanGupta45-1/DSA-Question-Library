Explanation
Use BFS (level-order traversal) with a queue to traverse the tree level by level.
For each level, iterate over all nodes currently in the queue, storing their values in a temporary vector temp.
Push the left and right children of each node into the queue for the next level.
After processing a level, append temp to ans and clear temp for the next level.

Complexity
Time: O(n) → every node is visited exactly once.
Space: O(n) → queue may hold up to all nodes in the last level and storage for ans.

Code
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root == nullptr)
            return {};

        vector<vector<int>> ans;
        vector<int> temp;
        queue<TreeNode*> q;

        q.push(root);

        while(!q.empty())
        {
            int n = q.size();
            while(n--)
            {
                TreeNode* a = q.front();
                q.pop();
                temp.push_back(a->val);

                if(a->left)
                    q.push(a->left);
                if(a->right)
                    q.push(a->right);
            }
            ans.push_back(temp);
            temp = {};
        }
        return ans;
    }
};