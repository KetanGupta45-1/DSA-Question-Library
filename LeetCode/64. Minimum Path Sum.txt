(a) Top-Down DP (Memoization)
-------------------------------------------------------------------------------------------------

Key points
Recursive state (i, j) = min path sum from (i, j) to destination.
At each step, try going right or down.
Cache results in dp to avoid recomputation.

Complexity
Time: O(m×n).
Space: O(m×n) for dp + O(m+n) recursion stack.

Code (your version, slightly cleaned):
class Solution {
public:
    int m, n;
    vector<vector<int>> dp;

    int dfs(vector<vector<int>>& grid, int i, int j) {
        if(i == m-1 && j == n-1)
            return grid[i][j];

        if(dp[i][j] != -1)
            return dp[i][j];

        int down = (i+1 < m) ? dfs(grid, i+1, j) : INT_MAX;
        int right = (j+1 < n) ? dfs(grid, i, j+1) : INT_MAX;

        return dp[i][j] = grid[i][j] + min(down, right);
    }

    int minPathSum(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        dp.assign(m, vector<int>(n, -1));
        return dfs(grid, 0, 0);
    }
};


-------------------------------------------------------------------------------------------------
(b) Bottom-Up DP (Tabulation)
-------------------------------------------------------------------------------------------------

Key points
Start from (0,0), fill dp iteratively until (m-1,n-1).
Each cell = its value + min(from top, from left).
In-place possible by updating grid.

Complexity
Time: O(m×n).
Space: O(1) extra (if grid reused).

Code:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(i==0 && j==0) continue;
                int fromTop = (i>0) ? grid[i-1][j] : INT_MAX;
                int fromLeft = (j>0) ? grid[i][j-1] : INT_MAX;
                grid[i][j] += min(fromTop, fromLeft);
            }
        }

        return grid[m-1][n-1];
    }
};