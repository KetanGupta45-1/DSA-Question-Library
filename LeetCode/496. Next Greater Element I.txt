Brute Force Approach
-------------------------------------------------------------------------------------------------

Explanation 
For each element in nums1, find its index in nums2.
From that index onward, scan to the right until a greater element is found.
If found, record it; otherwise, return -1.

Complexity
Time: O(m * n) → for each element in nums1 (m), potentially scan nums2 (n).
Space: O(1) → no extra data structures.

Code
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;

        for(int x : nums1) {
            int idx = -1;
            for(int i = 0; i < nums2.size(); i++) {
                if(nums2[i] == x) {
                    idx = i;
                    break;
                }
            }

            int next = -1;
            for(int j = idx + 1; j < nums2.size(); j++) {
                if(nums2[j] > x) {
                    next = nums2[j];
                    break;
                }
            }

            ans.push_back(next);
        }

        return ans;
    }
};


-------------------------------------------------------------------------------------------------
Optimised Approach (Monotonic Stack)
-------------------------------------------------------------------------------------------------

Explanation 
Traverse nums2 from right to left while maintaining a monotonic decreasing stack.
For each element, pop smaller elements (they can’t be a “next greater” for anyone).
Store the next greater element (or -1) in a hashmap, then map values of nums1 directly.

Complexity
Time: O(n + m) → each element pushed/popped once.
Space: O(n) → stack + hashmap.

Code
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> st;
        unordered_map<int, int> map;
        int n = nums2.size();

        for(int i = n - 1; i >= 0; i--) {
            while(!st.empty() && st.top() <= nums2[i])
                st.pop();

            if(st.empty()) map[nums2[i]] = -1;
            else map[nums2[i]] = st.top();

            st.push(nums2[i]);
        }

        for(int i = 0; i < nums1.size(); i++)
            nums1[i] = map[nums1[i]];

        return nums1;
    }
};