Explanation

Traverse nums2 from right to left while maintaining a monotonic decreasing stack.

For each element, pop smaller elements (since they can’t be the "next greater" for anyone).

Store the next greater element (or -1 if none) in a hashmap for quick lookup.

Finally, replace each element in nums1 with its precomputed next greater value.

Time Complexity

O(n + m) → n = nums2.size(), m = nums1.size(). Each element is pushed/popped at most once.

Space Complexity

O(n) → Stack and hashmap store up to n elements.

Code
class Solution
{
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2)
    {
        stack<int> st;
        unordered_map<int, int> map;
        int n = nums2.size();

        for(int i = n - 1; i >= 0; i--)
        {
            while(!st.empty() && st.top() <= nums2[i])
                st.pop();

            if(st.empty())
                map[nums2[i]] = -1;
            else
                map[nums2[i]] = st.top();

            st.push(nums2[i]);
        }

        for(int i = 0; i < nums1.size(); i++)
            nums1[i] = map[nums1[i]];

        return nums1;
    }
};