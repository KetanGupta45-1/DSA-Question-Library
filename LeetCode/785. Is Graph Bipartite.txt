Brute Force Approach (Check all pairs in each component)
-------------------------------------------------------------------------------------------------------------------------------------

Explanation
For every connected component, perform a DFS/BFS to collect nodes into one set.
After building the component, check every edge (u, v) inside it: if both u and v are in the same ‚Äúcolor group‚Äù, return false.
This requires repeated checks across edges ‚Üí less efficient.

Time Complexity
O(V * E) ‚Üí For each component, verifying edges inside.
Space Complexity
O(V) ‚Üí Store nodes of component.

Code
class Solution {
public:
    bool brute(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);

        for(int start = 0; start < n; start++) {
            if(color[start] != -1) continue;
            queue<int> q;
            q.push(start);
            color[start] = 0;
            while(!q.empty()) {
                int u = q.front(); q.pop();
                for(int v : graph[u]) {
                    if(color[v] == -1) {
                        color[v] = 1 - color[u];
                        q.push(v);
                    }
                }
            }
        }

        // check every edge
        for(int u = 0; u < n; u++) {
            for(int v : graph[u]) {
                if(color[u] == color[v]) return false;
            }
        }
        return true;
    }
};

-------------------------------------------------------------------------------------------------------------------------------------
üü† Optimized Approach (DFS with coloring)
-------------------------------------------------------------------------------------------------------------------------------------

Explanation
Maintain a color array initialized with -1.
Start DFS from each unvisited node.
Assign a color (0/1) and try to assign the opposite color to all its neighbors.
If a neighbor already has the same color as the current node, return false.
If all nodes can be colored without conflict, the graph is bipartite.

Time Complexity
O(V + E) ‚Üí Each node and edge is processed once.
Space Complexity
O(V) ‚Üí Color array + recursion stack (worst case depth = V).

Code
class Solution {
public:
    bool dfs(vector<vector<int>>& graph, vector<int>& color, int node, int val) {
        color[node] = val;
        for(int neigh : graph[node]) {
            if(color[neigh] == color[node]) return false;
            if(color[neigh] == -1) {
                if(!dfs(graph, color, neigh, 1 - color[node]))
                    return false;
            }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for(int i = 0; i < n; i++) {
            if(color[i] == -1) {
                if(!dfs(graph, color, i, 0))
                    return false;
            }
        }
        return true;
    }
};