ðŸŸ¢ Brute Force
-------------------------------------------------------------------------------------------------

Generate all triplets (i,j,k) with i<j<k.
For each, check if nums[i]+nums[j]+nums[k] == 0.
Store unique triplets (set needed to avoid duplicates).

Time Complexity: O(nÂ³)
Space Complexity: O(nÂ³) if storing in a set (or O(1) if only checking).

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>> st;
        for(int i=0; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                for(int k=j+1; k<n; k++) {
                    if(nums[i] + nums[j] + nums[k] == 0) {
                        vector<int> trip = {nums[i], nums[j], nums[k]};
                        sort(trip.begin(), trip.end());
                        st.insert(trip);
                    }
                }
            }
        }
        return vector<vector<int>>(st.begin(), st.end());
    }
};


-------------------------------------------------------------------------------------------------
ðŸŸ  Optimized (your code)
-------------------------------------------------------------------------------------------------

Sort the array â†’ simplifies duplicate handling and searching.
Fix one number nums[i] and use two pointers (a, b) for the rest.
Move pointers inward based on sum comparison.
Skip duplicates to ensure unique triplets.

Time Complexity: O(nÂ²)
Space Complexity: O(1) (ignoring result storage).

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;

        for(int i=0; i<n-2; i++) {
            if(i > 0 && nums[i] == nums[i-1]) continue;
            int a = i+1, b = n-1;
            while(a < b) {
                int sum = nums[i] + nums[a] + nums[b];
                if(sum == 0) {
                    ans.push_back({nums[i], nums[a], nums[b]});
                    a++; b--;
                    while(a < b && nums[a] == nums[a-1]) a++;
                    while(a < b && nums[b] == nums[b+1]) b--;
                } else if(sum > 0) {
                    b--;
                } else {
                    a++;
                }
            }
        }
        return ans;
    }
};