Explanation
Maintain a prefix sum as you iterate through the array.
Use a hash map to store the frequency of each prefix sum encountered so far.
For each new prefix sum prefix_sum, check if prefix_sum - k exists in the map:
If yes, it means there’s a subarray ending at current index with sum k.
Increment the count accordingly and update the map with the current prefix sum.

Complexity
Time: O(n) → single pass through the array.
Space: O(n) → for storing prefix sums in the map.

Code
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        unordered_map<int, int> map;
        map[0] = 1;
        int prefix_sum = 0;

        for(int i = 0; i < n; i++)
        {
            prefix_sum += nums[i];
            int rem = prefix_sum - k;

            if(map.count(rem))
                count += map[rem];
            
            map[prefix_sum]++;
        }

        return count;
    }
};