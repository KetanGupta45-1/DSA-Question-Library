Explanation
Use recursion to find the correct position to insert the new value in the BST.
If val is smaller than the current node, go to the left subtree; if larger, go to the right subtree.
When a nullptr child is reached, create a new TreeNode with val and attach it.
Return the original root after insertion is complete.

Complexity
Time: O(h) → where h is the height of the BST (O(log n) for balanced, O(n) for skewed).
Space: O(h) → recursion stack space.

Code
class Solution {
public:
    void helper(TreeNode* root, int val) 
    {
        if (root == nullptr)
            return;

        if (root->val > val) 
        {
            if (root->left)
                helper(root->left, val);
            else 
            {
                TreeNode* node = new TreeNode(val);
                root->left = node;
            }
        } 
        else 
        {
            if (root->right)
                helper(root->right, val);
            else 
            {
                TreeNode* node = new TreeNode(val);
                root->right = node;
            }
        }
    }

    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == nullptr) 
        {
            root = new TreeNode(val);
            return root;
        }

        helper(root, val);
        return root;
    }
};