Explanation
Perform a level-order traversal (BFS) using a queue.
For each level, track the maximum value among all nodes at that level.
After finishing the level, store the maximum in the result vector.
Continue until all levels are processed and return the result.

Time Complexity
O(n) → Each node is visited exactly once.

Space Complexity
O(w) → Queue stores nodes level by level, where w is the maximum width of the tree (worst case O(n)).


class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if(!root)
            return {};
        
        int maxi = INT_MIN;
        queue<TreeNode*>q;
        q.push(root);
        vector<int>ans;

        while(!q.empty())
        {
            int n = q.size();
            while(n--)
            {
                TreeNode* curr = q.front();
                q.pop();

                maxi = max(maxi, curr->val);

                if(curr->right)
                    q.push(curr->right);
                if(curr->left)
                    q.push(curr->left);
            }

            ans.push_back(maxi);
            maxi = INT_MIN;
        }

        return ans;
    }
};